[project]
name = "vmess-aead"
version = "0.1.0"
description = "VMessAEAD packet parser for python."
authors = [{ name = "Mix", email = "32300164+mnixry@users.noreply.github.com" }]
dependencies = [
    "cryptography>=42.0.0", # Cryptography 42.0.0 is the first version that supports SM4-GCM
]
requires-python = ">=3.10"
readme = "README.md"
license = { text = "MIT" }

[project.optional-dependencies]
cli = [
    "rich>=13.7.0",       # Rich is used to support colored logging
    "typer[all]>=0.10.0", # Typer is used to support command line interface
    "multidict>=6.0.5",   # Multidict is used to support HTTP headers parsing
]

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pdm.dev-dependencies]
dev = [
    "ruff>=0.3.4",
    "pytest>=8.1.1",
    "pytest-cov>=5.0.0",
    "pytest-pretty>=1.2.0",
]

[tool.pdm.scripts]
test = "pytest --cov --cov-report=term-missing ."
format = "ruff format"
lint = "ruff check"

[tool.coverage.run]
branch = true
omit = [
    "**/cli/*.py", # Skip the CLI coverage report
]

[tool.coverage.report]
exclude_also = [
    # Skip abstract methods
    "raise AssertionError",
    "raise NotImplementedError",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
lint.select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "ASYNC", # flake8-async
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions    
    "SIM",   # flake8-simplify
    "T10",   # flake8-debugger
    "T20",   # flake8-print
    "PYI",   # flake8-pyi
    "PT",    # flake8-pytest-style
    "Q",     # flake8-quotes
    "F",     # Pyflakes
    "I",     # isort
    "UP",    # pyupgrade
    "RUF",   # Ruff-specific rules
]
lint.ignore = [
    "B008", # Do not perform calls in argument defaults
]
target-version = "py310"
