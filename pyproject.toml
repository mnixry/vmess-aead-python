[project]
name = "vmess-aead"
version = "0.1.0"
description = "VMessAEAD packet parser for python."
authors = [{ name = "Mix", email = "32300164+mnixry@users.noreply.github.com" }]
dependencies = [
    "cryptography>=45.0.2", # Cryptography 42.0.0 is the first version that supports SM4-GCM
]
requires-python = ">=3.12"
readme = "README.md"
license = { text = "MIT" }

[dependency-groups]
dev = [
    "ruff>=0.11.11",
    "pytest>=8.3.5",
    "pytest-cov>=6.1.1",
    "pytest-pretty>=1.2.0",
]
cli = ["rich>=14.0.0", "typer[all]>=0.15.4", "multidict>=6.4.4"]


[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pdm.scripts]
test = "pytest --cov --cov-report=term-missing ."
format = "ruff format"
lint = "ruff check"

[tool.coverage.run]
branch = true
omit = [
    "**/cli/*.py", # Skip the CLI coverage report
]

[tool.coverage.report]
exclude_also = [
    # Skip abstract methods
    "raise AssertionError",
    "raise NotImplementedError",
    "@(abc\\.)?abstractmethod",
    # Pytest
    "if __name__ == .__main__.:",
    "pytest\\.skip",
    "pytest\\.mark\\.skip",
]

[tool.pyright]
typeCheckingMode = "standard"

[tool.ruff]
lint.select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "A",     # flake8-builtins
    "ASYNC", # flake8-async
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "G",     # flake8-logging-format 
    "LOG",   # flake8-logging
    "PT",    # flake8-pytest-style
    "PYI",   # flake8-pyi
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "SIM",   # flake8-simplify
    "SLF",   # flake8-self
    "T10",   # flake8-debugger
    "T20",   # flake8-print
    "F",     # Pyflakes
    "TRY",   # tryceratops
    "I",     # isort
    "UP",    # pyupgrade
    "C90",   # complexity
    "N",     # naming
    "RUF",   # Ruff-specific rules
]
lint.ignore = [
    "B008",   # Do not perform calls in argument defaults
    "TRY003", # Avoid specifying long messages outside the exception class
]
target-version = "py312"
